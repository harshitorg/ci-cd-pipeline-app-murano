Namespaces:
  =: io.murano.opaas
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  opaas: io.murano.opaas
  puppet: io.murano.opaas.puppet

Name: Jenkins

Extends: std:Application

Properties:
  name:
    Contract: $.string().notNull()
  instance:
    Contract: $.class(puppet:PuppetInstance).notNull()

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - $.super($.deploy())
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating security group for Jenkins')
          - $securityGroupIngress:
              - ToPort: 8080
                FromPort: 8080
                IpProtocol: tcp
                External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)

          - $._environment.reporter.report($this, 'Creating VM for Jenkins {0}'.format($.instance.openstackId))
          - $.instance.deploy()
          - $._environment.reporter.report($this, 'Jenkins VM {0} created'.format($.instance.openstackId))

          - $this.projectConfig: new(puppet:ProjectConfig)
          - $this.projectConfig.installOnTheNode($this.instance)

          - $resources: new(sys:Resources)
          - $template: $resources.yaml('DeployJenkins.template')
          - $._environment.reporter.report($this, 'Jenkins deploying')
          - $.instance.agent.call($template, $resources)

          - If: $.instance.assignFloatingIp
            Then:
              - $host: $.instance.floatingIpAddress
            Else:
              - $host: $.instance.ipAddresses[0]
          - $._environment.reporter.report($this, 'Jenkins is available at {0}:8080'.format($host))
          - $.setAttr(deployed, true)


  destroy:
    Body:
      - $.reportDestroyed()
      - $.setAttr(deployed, false)
